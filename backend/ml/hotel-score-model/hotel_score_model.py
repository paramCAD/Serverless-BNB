"""
    @author Bharatwaaj Shankaranarayanan
    @application hotel-score-model
    @description This application takes the customer reviews as input and gives a rating to a particular hotel
    @version 1.0.0
"""
# Imports
from google.cloud import language_v1
from flask import escape
import functions_framework

class HoteScoreModel():
    
    """
        @author Bharatwaaj Shankaranarayanan
        @class HotelScoreModel
        @description HotelScoreModel Generi class
        @params
        @return Object
    """
    
    # Constructor for the HotelScoreModel
    def __init__(self):
        
        # Creating the Language Service Client
        self.client = language_v1.LanguageServiceClient()
        
    def analyze(self, data):
        
        """
            @author Bharatwaaj Shankaranarayanan
            @function analyze
            @description This function analyzes the data and provides the sentiment results from GCP Cloud Natural Language API
            @params data (str)
            @returns annotations (AnalyzeSentimentResponse)
        """
        
        # Create the content document from the set of input sentences
        document = language_v1.Document(content=data,type_=language_v1.Document.Type.PLAIN_TEXT)
        
        # Get the annotations of the document from GCP Natural Language API client
        annotations = self.client.analyze_sentiment(request={"document": document})
        
        return annotations
    
    def generate_rating_score(self, annotations):
        """
            @author Bharatwaaj Shankaranarayanan
            @function generate_rating_score
            @description This function parses the annotations for the data generated by the GCP Natural Language API and generates the score
            @params annotations (AnalyzeSentimentResponse)
            @returns score (float)
        """
        return ((annotations.document_sentiment.score + 1) * 5) / 2
    
    def generate_rating_polarity(self, annotations):
        """
            @author Bharatwaaj Shankaranarayanan
            @function generate_rating_polarity
            @description This function parses the annotations for the data generated by the GCP Natural Language API and generates rating polity
            @params annotations (AnalyzeSentimentResponse)
            @returns polarity (enum)
        """
        if(annotations.document_sentiment.score < 0):
            return "NEGATIVE";
        elif (annotations.document_sentiment.score == 0):
            return "NEUTRAL";
        else:
            return "POSITIVE";
        
    
@functions_framework.http
def main(request):
    """HTTP Cloud Function.
    Args:
        request (flask.Request): The request object.
        <https://flask.palletsprojects.com/en/1.1.x/api/#incoming-request-data>
    Returns:
        The response text, or any set of values that can be turned into a
        Response object using `make_response`
        <https://flask.palletsprojects.com/en/1.1.x/api/#flask.make_response>.
    """
    request_json = request.get_json(silent=True)
    request_args = request.args

    data = "This is a very bad experience, though the food was good. The experience was extremely bad."
    
    if request_json and 'reviews' in request_json:
        data = request_json['reviews']
    elif request_args and 'reviews' in request_args:
        data = request_args['reviews']    
        
    # Hotel Score Model Class instantiation & score generation
    hsm = HoteScoreModel()
    annotations = hsm.analyze(data)
    score = hsm.generate_rating_score(annotations)

    return score